{
  mode: "client",

  connect: {
    timeout_ms: -1,
    endpoints: [
      "tcp/localhost:7447"
    ],
    exit_on_failure:  false,
    retry: {
      period_init_ms: 1000,
      period_max_ms: 4000,
      period_increase_factor: 2,
    },
  },

  open: {
    return_conditions: {
      declares: true,
    },
  },
  
  timestamping: {
    enabled: true,
    drop_future_timestamp: false,
  },

  queries_default_timeout: 10000,

  //  /// Overwrite QoS options for Zenoh messages by key expression (ignores Zenoh API QoS config for overwritten values)
  //  qos: {
  //    /// Overwrite QoS options for PUT and DELETE messages
  //    publication: [
  //      {
  //        /// PUT and DELETE messages on key expressions that are included by these key expressions
  //        /// will have their QoS options overwritten by the given config.
  //        key_exprs: ["demo/**", "example/key"],
  //        /// Configurations that will be applied on the publisher.
  //        /// Options that are supplied here will overwrite the configuration given in Zenoh API
  //        config: {
  //          congestion_control: "block",
  //          priority: "data_high",
  //          express: true,
  //          reliability: "best_effort",
  //          allowed_destination: "remote",
  //        },
  //      },
  //    ],
  //  },

  //  /// The declarations aggregation strategy.
  //  aggregation: {
  //      /// A list of key-expressions for which all included subscribers will be aggregated into.
  //      subscribers: [
  //        // key_expression
  //      ],
  //      /// A list of key-expressions for which all included publishers will be aggregated into.
  //      publishers: [
  //        // key_expression
  //      ],
  //  },

  //  /// The downsampling declaration.
  //  downsampling: [
  //    {
  //      /// A list of network interfaces messages will be processed on, the rest will be passed as is.
  //      interfaces: [ "wlan0" ],
  //      /// Data flow messages will be processed on. ("egress" or "ingress")
  //      flow: "egress",
  //      /// A list of downsampling rules: key_expression and the maximum frequency in Hertz
  //      rules: [
  //        { key_expr: "demo/example/zenoh-rs-pub", freq: 0.1 },
  //      ],
  //    },
  //  ],

  //  /// Configure access control (ACL) rules
  //  access_control: {
  //   /// [true/false] acl will be activated only if this is set to true
  //   "enabled": false,
  //   /// [deny/allow] default permission is deny (even if this is left empty or not specified)
  //   "default_permission": "deny",
  //   /// Rule set for permissions allowing or denying access to key-expressions
  //   "rules":
  //   [
  //     {
  //       /// Id has to be unique within the rule set
  //       "id": "rule1",
  //       "messages": [
  //         "put", "delete", "declare_subscriber",
  //         "query", "reply", "declare_queryable",
  //         "liveliness_token", "liveliness_query", "declare_liveliness_subscriber",
  //       ],
  //       "flows":["egress","ingress"],
  //       "permission": "allow",
  //       "key_exprs": [
  //         "test/demo"
  //       ],
  //     },
  //     {
  //       "id": "rule2",
  //       "messages": [
  //         "put", "delete", "declare_subscriber",
  //         "query", "reply", "declare_queryable",
  //       ],
  //       "flows":["ingress"],
  //       "permission": "allow",
  //       "key_exprs": [
  //         "**"
  //       ],
  //     },
  //   ],
  //   /// List of combinations of subjects.
  //   ///
  //   /// If a subject property (i.e. username, certificate common name or interface) is empty
  //   /// it is interpreted as a wildcard. Moreover, a subject property cannot be an empty list.
  //   "subjects":
  //   [
  //     {
  //       /// Id has to be unique within the subjects list
  //       "id": "subject1",
  //       /// Subjects can be interfaces
  //       "interfaces": [
  //         "lo0",
  //         "en0",
  //       ],
  //       /// Subjects can be cert_common_names when using TLS or Quic
  //       "cert_common_names": [
  //         "example.zenoh.io"
  //       ],
  //       /// Subjects can be usernames when using user/password authentication
  //       "usernames": [
  //         "zenoh-example"
  //       ],
  //       /// This instance translates internally to this filter:
  //       /// (interface="lo0" && cert_common_name="example.zenoh.io" && username="zenoh-example") ||
  //       /// (interface="en0" && cert_common_name="example.zenoh.io" && username="zenoh-example")
  //     },
  //     {
  //       "id": "subject2",
  //       "interfaces": [
  //         "lo0",
  //         "en0",
  //       ],
  //       "cert_common_names": [
  //         "example2.zenoh.io"
  //       ],
  //       /// This instance translates internally to this filter:
  //       /// (interface="lo0" && cert_common_name="example2.zenoh.io") ||
  //       /// (interface="en0" && cert_common_name="example2.zenoh.io")
  //     },
  //     {
  //       "id": "subject3",
  //       /// An empty subject combination is a wildcard
  //     },
  //   ],
  //   /// The policies list associates rules to subjects
  //   "policies":
  //   [
  //      /// Each policy associates one or multiple rules to one or multiple subject combinations
  //      {
  //         /// Rules and Subjects are identified with their unique IDs declared above
  //         "rules": ["rule1"],
  //         "subjects": ["subject1", "subject2"],
  //      },
  //      {
  //         "rules": ["rule2"],
  //         "subjects": ["subject3"],
  //      },
  //   ]
  //},

  /// Configure internal transport parameters
  transport: {
    unicast: {
      /// Timeout in milliseconds when opening a link
      open_timeout: 10000,
      /// Timeout in milliseconds when accepting a link
      accept_timeout: 10000,
      /// Maximum number of links in pending state while performing the handshake for accepting it
      accept_pending: 100,
      /// Maximum number of transports that can be simultaneously alive for a single zenoh sessions
      max_sessions: 1000,
      /// Maximum number of incoming links that are admitted per transport
      max_links: 1,
      /// Enables the LowLatency transport
      /// This option does not make LowLatency transport mandatory, the actual implementation of transport
      /// used will depend on Establish procedure and other party's settings
      ///
      /// NOTE: Currently, the LowLatency transport doesn't preserve QoS prioritization.
      /// NOTE: Due to the note above, 'lowlatency' is incompatible with 'qos' option, so in order to
      ///       enable 'lowlatency' you need to explicitly disable 'qos'.
      /// NOTE: LowLatency transport does not support the fragmentation, so the message size should be
      ///       smaller than the tx batch_size.
      lowlatency: true,
      /// Enables QoS on unicast communications.
      qos: {
        enabled: false,
      },
      /// Enables compression on unicast communications.
      /// Compression capabilities are negotiated during session establishment.
      /// If both Zenoh nodes support compression, then compression is activated.
      compression: {
        enabled: false,
      },
    },
    link: {
      /// An optional whitelist of protocols to be used for accepting and opening sessions. If not
      /// configured, all the supported protocols are automatically whitelisted. The supported
      /// protocols are: ["tcp" , "udp", "tls", "quic", "ws", "unixsock-stream", "vsock"] For
      /// example, to only enable "tls" and "quic": protocols: ["tls", "quic"],
      ///
      /// Configure the zenoh TX parameters of a link
      tx: {
        /// The resolution in bits to be used for the message sequence numbers.
        /// When establishing a session with another Zenoh instance, the lowest value of the two instances will be used.
        /// Accepted values: 8bit, 16bit, 32bit, 64bit.
        sequence_number_resolution: "32bit",
        /// Link lease duration in milliseconds to announce to other zenoh nodes
        lease: 10000,
        /// Number of keep-alive messages in a link lease duration. If no data is sent, keep alive
        /// messages will be sent at the configured time interval.
        /// NOTE: In order to consider eventual packet loss and transmission latency and jitter,
        ///       set the actual keep_alive interval to one fourth of the lease time: i.e. send
        ///       4 keep_alive messages in a lease period. Changing the lease time will have the
        ///       keep_alive messages sent more or less often.
        ///       This is in-line with the ITU-T G.8013/Y.1731 specification on continuous connectivity
        ///       check which considers a link as failed when no messages are received in 3.5 times the
        ///       target interval.
        keep_alive: 4,
        /// Batch size in bytes is expressed as a 16bit unsigned integer.
        /// Therefore, the maximum batch size is 2^16-1 (i.e. 65535).
        /// The default batch size value is the maximum batch size: 65535.
        batch_size: 65535,
        /// Each zenoh link has a transmission queue that can be configured
        queue: {
          /// The size of each priority queue indicates the number of batches a given queue can contain.
          /// NOTE: the number of batches in each priority must be included between 1 and 16. Different values will result in an error.
          /// The amount of memory being allocated for each queue is then SIZE_XXX * BATCH_SIZE.
          /// In the case of the transport link MTU being smaller than the ZN_BATCH_SIZE,
          /// then amount of memory being allocated for each queue is SIZE_XXX * LINK_MTU.
          /// If qos is false, then only the DATA priority will be allocated.
          size: {
            control: 2,
            real_time: 2,
            interactive_high: 2,
            interactive_low: 2,
            data_high: 2,
            data: 2,
            data_low: 2,
            background: 2,
          },
          /// Congestion occurs when the queue is empty (no available batch).
          congestion_control: {
            /// Behavior pushing CongestionControl::Drop messages to the queue.
            drop: {
              /// The maximum time in microseconds to wait for an available batch before dropping a droppable message if still no batch is available.
              wait_before_drop: 1000,
              /// The maximum deadline limit for multi-fragment messages.
              max_wait_before_drop_fragments: 50000,
            },
            /// Behavior pushing CongestionControl::Block messages to the queue.
            block: {
              /// The maximum time in microseconds to wait for an available batch before closing the transport session when sending a blocking message
              /// if still no batch is available.
              wait_before_close: 5000000,
            },
          },
          /// Perform batching of messages if they are smaller of the batch_size
          batching: {
            /// Perform adaptive batching of messages if they are smaller of the batch_size.
            /// When the network is detected to not be fast enough to transmit every message individually, many small messages may be
            /// batched together and sent all at once on the wire reducing the overall network overhead. This is typically of a high-throughput
            /// scenario mainly composed of small messages. In other words, batching is activated by the network back-pressure.
            enabled: true,
            /// The maximum time limit (in ms) a message should be retained for batching when back-pressure happens.
            time_limit: 1,
          },
          allocation: {
            /// Mode for memory allocation of batches in the priority queues. 
            /// - "init": batches are allocated at queue initialization time. 
            /// - "lazy": batches are allocated when needed up to the maximum number of batches configured in the size configuration parameter.
            mode: "lazy",
          },
        },
      },
      /// Configure the zenoh RX parameters of a link
      rx: {
        /// Receiving buffer size in bytes for each link
        /// The default the rx_buffer_size value is the same as the default batch size: 65535.
        /// For very high throughput scenarios, the rx_buffer_size can be increased to accommodate
        /// more in-flight data. This is particularly relevant when dealing with large messages.
        /// E.g. for 16MiB rx_buffer_size set the value to: 16777216.
        buffer_size: 65535,
        /// Maximum size of the defragmentation buffer at receiver end.
        /// Fragmented messages that are larger than the configured size will be dropped.
        /// The default value is 1GiB. This would work in most scenarios.
        /// NOTE: reduce the value if you are operating on a memory constrained device.
        max_message_size: 1073741824,
      },
      /// Configure TLS specific parameters
      tls: {
        /// Path to the certificate of the certificate authority used to validate either the server
        /// or the client's keys and certificates, depending on the node's mode. If not specified
        /// on router mode then the default WebPKI certificates are used instead.
        root_ca_certificate: null,
        /// Path to the TLS listening side private key
        listen_private_key: null,
        /// Path to the TLS listening side public certificate
        listen_certificate: null,
        ///  Enables mTLS (mutual authentication), client authentication
        enable_mtls: false,
        /// Path to the TLS connecting side private key
        connect_private_key: null,
        /// Path to the TLS connecting side certificate
        connect_certificate: null,
        // Whether or not to verify the matching between hostname/dns and certificate when connecting,
        // if set to false zenoh will disregard the common names of the certificates when verifying servers.
        // This could be dangerous because your CA can have signed a server cert for foo.com, that's later being used to host a server at baz.com.
        // If you want your ca to verify that the server at baz.com is actually baz.com, let this be true (default).
        verify_name_on_connect: true,
        // Whether or not to close links when remote certificates expires.
        // If set to true, links that require certificates (tls/quic) will automatically disconnect when the time of expiration of the remote certificate chain is reached
        // note that mTLS (client authentication) is required for a listener to disconnect a client on expiration
        close_link_on_expiration: false,
        /// Optional configuration for TCP system buffers sizes for TLS links
        ///
        /// Configure TCP read buffer size (bytes)
        // so_rcvbuf: 123456,
        /// Configure TCP write buffer size (bytes)
        // so_sndbuf: 123456,
      },
    // // Configure optional TCP link specific parameters
    // tcp: {
    //   /// Optional configuration for TCP system buffers sizes for TCP links
    //   ///
    //   /// Configure TCP read buffer size (bytes)
    //   // so_rcvbuf: 123456,
    //   /// Configure TCP write buffer size (bytes)
    //   // so_sndbuf: 123456,
    // }
    },
    /// Shared memory configuration.
    /// NOTE: shared memory can be used only if zenoh is compiled with "shared-memory" feature, otherwise
    /// settings in this section have no effect.
    shared_memory: {
      /// A probing procedure for shared memory is performed upon session opening. To enable zenoh to operate
      /// over shared memory (and to not fallback on network mode), shared memory needs to be enabled also on the
      /// subscriber side. By doing so, the probing procedure will succeed and shared memory will operate as expected.
      ///
      /// ROS setting: disabled by default until fully tested
      enabled: false,
    },
    auth: {
      /// The configuration of authentication.
      /// A password implies a username is required.
      //usrpwd: {
      //  user: "",
      //  password: "",
      //  /// The path to a file containing the user password dictionary
      //  dictionary_file: "",
      //},
      //pubkey: {
      //  public_key_pem: null,
      //  private_key_pem: null,
      //  public_key_file: null,
      //  private_key_file: null,
      //  key_size: null,
      //  known_keys_file: null,
      //},
    },
  },

  /// Configure the Admin Space
  /// Unstable: this configuration part works as advertised, but may change in a future release
  adminspace: {
    /// Enables the admin space
    enabled: true,
    /// read and/or write permissions on the admin space
    permissions: {
      read: true,
      write: false,
    },
  },

}
